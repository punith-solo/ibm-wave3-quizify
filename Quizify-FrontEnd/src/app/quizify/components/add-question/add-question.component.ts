import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';
import { ReccommendationService } from '../../services/reccommendation.service';
import { AddQuestionService } from '../../services/add-question.service';
import { Category } from '../../tsclasses/category';
import { Topic } from '../../tsclasses/topic';
import { Genre } from '../../tsclasses/genre';
import { MatSnackBar, MatTableDataSource, MatPaginator } from '@angular/material';
import { Question } from '../../tsclasses/question';
import { QuestionDetails } from '../../tsclasses/question-details';
import { QuestionElement } from '../../tsclasses/question-element';
import { constructor } from 'q';

export interface Levels {
  value: string;
  viewValue: string;
}

@Component({
  selector: 'app-add-question',
  templateUrl: './add-question.component.html',
  styleUrls: ['./add-question.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class AddQuestionComponent implements OnInit {
  private categories: Category[];
  private category: Category;
  private topics: Topic[];
  private topic: Topic;
  private genres: Genre[];
  private genre: Genre;
  private levels: Levels[];
  private types: Levels[];
  private question: Question;
  private questionDetails: QuestionDetails;
  private autoGeneratedQuestions: Question[];
  private questionElements: QuestionElement[];
  private questionElement: QuestionElement;

  private selectCategory: Category;
  private selectTopic: Topic;
  private selectGenre: Genre;

  private tfStatement: string;
  private tfselectedOption: string;
  private tfselectedLevel: string;

  private mcqStatement: string;
  private mcqOption1: string;
  private mcqOption2: string;
  private mcqOption3: string;
  private mcqOption4: string;
  private mcqSelectedOption: string;
  private mcqSelectedLevel: string;
  private autoSelectedType: string;
  private autoSelectedLevel: string;
  statusCode: any;

  // displayedColumns: string[] = ['id', 'statement', 'options', 'level', 'category', 'topic', 'genre'];
  displayedColumns: string[] = ['id', 'statement', 'level', 'category', 'topic', 'genre'];
  displayedColumnsAll: string[] = ['id', 'statement', 'correctAnswer', 'type', 'level', 'category', 'topic', 'genre'];
  dataSource: any;
  dataSourceAll: any;

  private allQuestions: Question[];

  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild('AllPaginator') paginatorAll: MatPaginator;

  constructor(private reccommendationService: ReccommendationService, private questionService: AddQuestionService, private snackBar: MatSnackBar) { }

  ngOnInit() {
    this.categories = [];
    this.topics = [];
    this.genres = [];
    this.levels = [
      {value: 'easy', viewValue: 'Easy'},
      {value: 'medium', viewValue: 'Medium'},
      {value: 'hard', viewValue: 'Hard'}
    ];

    this.types = [
      {value: 'mcq', viewValue: 'MCQ'}
    ];

    this.tfselectedOption = '';
    this.tfStatement = '';
    this.tfselectedLevel = '';

    this.mcqStatement = '';
    this.mcqOption1 = '';
    this.mcqOption2 = '';
    this.mcqOption3 = '';
    this.mcqOption4 = '';
    this.mcqSelectedOption = '';
    this.mcqSelectedLevel = '';

    this.autoSelectedType = '';
    this.autoSelectedLevel = '';

    this.reccommendationService.getAllCategoryFromReccommendation().subscribe((res: any) => {
      this.categories = res.body;
    });

    this.questionService.getAllQuestions().subscribe((res: any) => {
      this.allQuestions = res.body;
      this.dataSourceAll = new MatTableDataSource<Question>(this.allQuestions);
      this.dataSourceAll.paginator = this.paginatorAll;
    });
  }

  selectedCategory() {
    if (this.selectCategory != undefined)
    {
      this.reccommendationService.getTopicsByCategoryName(this.selectCategory.name).subscribe((res: any) => {
        this.topics = res.body;
      });

      this.reccommendationService.getGenresByCategoryName(this.selectCategory.name).subscribe((res: any) => {
        this.genres = res.body;
      });
    }
  }

  checkDetails() {
    if (this.selectCategory == undefined)
    {
      this.snackBar.open('Please Select Category !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      return false;
    }
    else if (this.selectTopic == undefined)
    {
      this.snackBar.open('Please Select Topic !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      return false;
    }
    else if (this.selectGenre == undefined)
    {
      this.snackBar.open('Please Select Genre !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      return false;
    }
    return true;
  }

  saveMcqQuestion() {
    if(this.checkDetails())
    {
      if (this.mcqStatement == '')
      this.snackBar.open('Please Give Question Statement !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else if (this.mcqOption1 == '' || this.mcqOption2 == '' || this.mcqOption3 == '' || this.mcqOption4 == '')
      this.snackBar.open('Please Give All Options !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else if (this.mcqSelectedOption == '')
      this.snackBar.open('Please Select Correct Option !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else if (this.mcqSelectedLevel == '')
      this.snackBar.open('Please Select Question Difficulty Level !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else
      {
        this.question = new Question();
        this.question.category = this.selectCategory;
        if(this.mcqSelectedOption === 'mcqOption1')
          this.question.correctAnswer = this.mcqOption1;
        else if(this.mcqSelectedOption === 'mcqOption2')
          this.question.correctAnswer = this.mcqOption2;
        else if(this.mcqSelectedOption === 'mcqOption3')
          this.question.correctAnswer = this.mcqOption3;
        else 
        this.question.correctAnswer = this.mcqOption4;
        this.question.genre = this.selectCategory;
        this.question.id = 0;
        this.question.level = this.mcqSelectedLevel;
        this.question.options = [this.mcqOption1, this.mcqOption2, this.mcqOption3, this.mcqOption4];
        this.question.playerAnswer = null;
        this.question.statement = this.mcqStatement;
        this.question.topic = this.selectTopic;
        this.question.type = 'mcq';
        this.saveQuestion(this.question);
      }
    }
  }

  saveTFQuestion()
  {
    if(this.checkDetails())
    {
      if (this.tfStatement == '')
      this.snackBar.open('Please Give Question Statement !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else if (this.tfselectedOption == '')
      this.snackBar.open('Please Select Correct Option !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else if (this.tfselectedLevel == '')
      this.snackBar.open('Please Select Question Difficulty Level !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else
      {
        this.question = new Question();
        this.question.category = this.selectCategory;
        this.question.correctAnswer = this.tfselectedOption;
        this.question.genre = this.selectCategory;
        this.question.id = 0;
        this.question.level = this.tfselectedLevel;
        this.question.options = ['true', 'false'];
        this.question.playerAnswer = null;
        this.question.statement = this.tfStatement
        this.question.topic = this.selectTopic;
        this.question.type = 't/f';
        this.saveQuestion(this.question);
      }
    }
  }

  autoGenerateQuestion() {
    if(this.checkDetails())
    {
      if (this.autoSelectedLevel  == '')
      this.snackBar.open('Please Select Question Level !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else if (this.autoSelectedType == '')
      this.snackBar.open('Please Select Question Type !!!', '', {
        duration: 1000,
        verticalPosition: 'top',
        horizontalPosition: 'center'
      });
      else 
      {
        this.questionDetails = new QuestionDetails();
        this.questionDetails.category = this.selectCategory;
        this.questionDetails.genre = this.selectGenre;
        this.questionDetails.level = this.autoSelectedLevel;
        this.questionDetails.topic = this.selectTopic;
        this.questionDetails.type = this.autoSelectedType;
        this.questionService.autoGenerateQuestions(this.questionDetails).subscribe((res: any) => {
          this.autoGeneratedQuestions = res.body;
          this.questionElements = [];
          this.autoGeneratedQuestions.forEach((question: Question) => {
            this.questionElement = new QuestionElement();
              this.questionElement.id = question.id;
              this.questionElement.statement = question.statement;
              this.questionElement.options = question.options;
              this.questionElement.level = question.level;
              this.questionElement.category = question.category.name;
              this.questionElement.topic = question.topic.name;
              this.questionElement.genre = question.genre.name;
              this.questionElements.push(this.questionElement);
          });
          this.dataSource = new MatTableDataSource<QuestionElement>(this.questionElements);
          this.dataSource.paginator = this.paginator;
          this.statusCode = res.status;
          if (this.statusCode === 200) {
            this.snackBar.open('Questions Generated Successfully !!!', '', {
              duration: 1000,
              verticalPosition: 'top',
              horizontalPosition: 'center'
            });

          }
        },
        err => {
          const errorStatus = err;
          this.statusCode = parseInt(errorStatus, 10);
          if (this.statusCode === 409) {
            this.snackBar.open('Questions Generation Failure !!!', '', {
              duration: 1000,
              verticalPosition: 'top',
              horizontalPosition: 'center'
            });
            this.statusCode = 0;
          }
      });
      }
    }
  }

  

  saveQuestion(question: Question) {
    this.questionService.saveQuestion(question).subscribe((res: any) => {
      this.statusCode = res.status;
      if (this.statusCode === 200) {
        console.log('Success', this.statusCode);
        this.snackBar.open('Question Successfully Saved !!!', '', {
          duration: 1000,
          verticalPosition: 'top',
          horizontalPosition: 'center'
        });
      }
    },
    err => {
      const errorStatus = err;
      this.statusCode = parseInt(errorStatus, 10);
      if (this.statusCode === 409) {
        this.snackBar.open('Question Already Exists', '', {
          duration: 1000,
          verticalPosition: 'top',
          horizontalPosition: 'center'
        });
        this.statusCode = 0;
      }
  });
  }

}
